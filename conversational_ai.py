import openai
import argparse
import base64
from flask import Flask, request, jsonify
from flask_cors import CORS

# Setting OpenAI API key 
OPENAI_API_KEY = "OPENAI_API_KEY"
openai.api_key = OPENAI_API_KEY


def moderate_content(response_text):
    """
    Checks the response for prohibited words and censors inappropriate content.
    
    :param response_text: The response text generated by GPT-4
    :return: Moderated response if inappropriate content is detected, else original response
    """
    prohibited_words = ["hate speech", "violence", "discrimination"]
    for word in prohibited_words:
        if word in response_text.lower():
            return "I'm sorry, but I can't provide a response to that request."
    return response_text


def chat_with_gpt4(user_input, image_data=None):
    """
    Sends text and/or image input to GPT-4 and returns a response.
    
    :param user_input: The text input from the user
    :param image_data: Base64 encoded image data (optional)
    :return: AI-generated response
    """
    try:
        messages = [{"role": "system", "content": "You are an ethical and unbiased AI assistant. Ensure fairness and avoid harmful content."}]
        
        if user_input:
            messages.append({"role": "user", "content": user_input})
        
        if image_data:
            messages.append({
                "role": "user",
                "content": [
                    {"type": "text", "text": user_input if user_input else "Describe the image."},
                    {"type": "image_url", "image_url": {"url": f"data:image/png;base64,{image_data}"}}
                ]
            })
        
        response = openai.ChatCompletion.create(
            model="gpt-4-turbo",
            messages=messages,
            max_tokens=150,
            temperature=0.7
        )
        
        moderated_response = moderate_content(response["choices"][0]["message"]["content"].strip())
        return moderated_response
    except Exception as e:
        return f"Error: {str(e)}"

    
def command_line_chatbot():
    """
    Runs a command-line chatbot that interacts with the user.
    """
    print("AI Assistant: Hello! How can I assist you today? (Type 'exit' to quit or 'upload image' to send an image)")
    while True:
        user_input = input("You: ")
        if user_input.lower() in ["exit", "quit", "bye"]:
            print("AI Assistant: Goodbye!")
            break
        
        if user_input.lower() == "upload image":
            image_path = input("Enter the path to the image: ")
            try:
                with open(image_path, "rb") as image_file:
                    image_data = base64.b64encode(image_file.read()).decode('utf-8')
                ai_response = chat_with_gpt4("", image_data)
            except Exception as e:
                print(f"Error: {str(e)}")
                continue
        else:
            ai_response = chat_with_gpt4(user_input)
        
        print(f"AI Assistant: {ai_response}")


# Flask-based Web API
app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": "*"}})

@app.route('/chat', methods=['POST'])
def chat_api():
    """
    Flask API endpoint to handle chat requests.
    
    :return: JSON response with AI-generated response
    """
    data = request.json
    user_input = data.get("input")
    image_data = data.get("image_path")  # Receiving base64 image data

    if not user_input and not image_data:
        return jsonify({"error": "No input or image provided!"}), 400

    response = chat_with_gpt4(user_input, image_data=image_data)
    return jsonify({"response": response})


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Run the chatbot as CLI or Web API")
    parser.add_argument("--mode", choices=["cli", "web"], default="cli", help="Run mode: cli (default) or web")
    args, unknown = parser.parse_known_args()
    
    if args.mode == "cli":
        command_line_chatbot()
    else:
        app.run(host="0.0.0.0", port=5000, debug=True, use_reloader=False)


